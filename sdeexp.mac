/* 
 * SDE Exp 1.0 
  The library depeds on SDE 2 package
 * 
 * (C) Dimiter Prodanov
 *
 * @version 1.0 Date 19 Apr 2014
 *
 * @author Dimiter Prodanov
 *        IMEC
 *
 * @contents: This library computes exectation of stochatic differenias
 *
 * The development of th package was inspired by Wilfrid Kendall's Itovsn3 MMA package and 
 * Andrey Zorin's SDE Maxima package.
 *
 *  The library is based on  the concepts presented in the paper
 * On Ito’s formula for multidimensional Brownian motion.  Hans Follmer and Philip  Protter,  Probab. Theory Relat. Fields 116, 1–20 (2000)
 * 
 * @license This library is free software; you can redistribute it and/or
 *      modify it under the terms of the GNU Lesser General Public
 *      License as published by the Free Software Foundation; either
 *      version 2.1 of the License, or (at your option) any later version.
 *
 *      This library is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *       Lesser General Public License for more details.
 *
 *      You should have received a copy of the GNU Lesser General Public
 *      License along with this library; if not, write to the Free Software
 *      Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
if get('sde2,'version)=false then ( 
    load("sde23.mac")
    
 )$
 
(	" Expectation operator",
	declare (EE, linear),
	declare_distributes_over (EE, ["[", "=", 'integrate, Int])
)$

/*******************************
*        Expectation functions
***************************/

( "Expectation rules 1 ",
matchdeclare(dw, martrand, w, randomp, %c, constantp , %t, true, V, lambda( [u], freeof(dw, u) and nrandomp(u) )  ),
    defrule (ieec,  EE(%c), %c),
    defrule (itoE1, EE(dw), 0),
    defrule (itoE2, EE(w), 0),
    defrule (itoE3, EE(w^2), %t),
    defrule (itoE4, EE(V), V)
)$

( "Linearity rule",
matchdeclare(f,  lambda([u], not(any(maplist(randomp, inargsa(u)))) and freeof(%t, u) and freeof(dw, u) and not diffp(u)), dw, martrand ),
    defrule (itoElin, EE(f*dw), f*EE(dw))  
)$

( "Expectation rules 2",
matchdeclare(f,  true, dw, martrand, %dt, diffp, V, lambda( [u], not freeof( dw, u) ) ),  
    defrule (itoE5, Int(EE(V)), 0),
    defrule (itoEIsom1, Int(EE(V)^2), Int(EE(splitBy1(V, dw)^2*%dt ) ) ) ,  
    defrule (itoEIsom2, Int(EE(X*Y)), Int(EE(X)*EE(Y)*%dt ) )   
)$

/*
* Expectation calculation
*/
sdeEE(X):=block( [p1, p2, ret ],
 ret:expand(X),
 ret:EE(ret),
 if opEqp(X) then (
    p1:part(ret,1),
    p2:part(ret,2)
  ) else (
    p1:EE, 
    p2:ret
  ),
  p2:apply1(p2, itoEIsom1, itoEIsom2),
    print ("s1 ", p2),
    if not freeof(EE, p2) then (
      p2:apply1(p2, ieec, itoElin, itoE1, itoE2 , itoE3),
      if not freeof(EE, p2) then (
        print ("s2 ", p2),
          p2:apply1(p2,  itoE4 , itoE5), 
            print ("s3 ", p2)
        )
    ),
  ret:p1=p2,
  return(ret)
)$

put('sdeexp, 1.0, 'version);
put('sdeexp, "Dimiter Prodanov", 'author);
put('sdeexp, "(C) - Dimiter Prodanov, 2014", 'copyright);
